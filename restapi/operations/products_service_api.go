// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/isaacomy/ralali/restapi/operations/category"
	"github.com/isaacomy/ralali/restapi/operations/order"
	"github.com/isaacomy/ralali/restapi/operations/price"
	"github.com/isaacomy/ralali/restapi/operations/product"
)

// NewProductsServiceAPI creates a new ProductsService instance
func NewProductsServiceAPI(spec *loads.Document) *ProductsServiceAPI {
	return &ProductsServiceAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		CategoryDeleteCategoryIDHandler: category.DeleteCategoryIDHandlerFunc(func(params category.DeleteCategoryIDParams) middleware.Responder {
			return middleware.NotImplemented("operation category.DeleteCategoryID has not yet been implemented")
		}),
		PriceDeletePriceIDHandler: price.DeletePriceIDHandlerFunc(func(params price.DeletePriceIDParams) middleware.Responder {
			return middleware.NotImplemented("operation price.DeletePriceID has not yet been implemented")
		}),
		ProductDeleteProductsIDHandler: product.DeleteProductsIDHandlerFunc(func(params product.DeleteProductsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation product.DeleteProductsID has not yet been implemented")
		}),
		CategoryGetCategoryIDHandler: category.GetCategoryIDHandlerFunc(func(params category.GetCategoryIDParams) middleware.Responder {
			return middleware.NotImplemented("operation category.GetCategoryID has not yet been implemented")
		}),
		CategoryGetCategoryListHandler: category.GetCategoryListHandlerFunc(func(params category.GetCategoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation category.GetCategoryList has not yet been implemented")
		}),
		OrderGetOrderIDHandler: order.GetOrderIDHandlerFunc(func(params order.GetOrderIDParams) middleware.Responder {
			return middleware.NotImplemented("operation order.GetOrderID has not yet been implemented")
		}),
		ProductGetProductsIDHandler: product.GetProductsIDHandlerFunc(func(params product.GetProductsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation product.GetProductsID has not yet been implemented")
		}),
		ProductGetProductsListHandler: product.GetProductsListHandlerFunc(func(params product.GetProductsListParams) middleware.Responder {
			return middleware.NotImplemented("operation product.GetProductsList has not yet been implemented")
		}),
		CategoryPostCategoryHandler: category.PostCategoryHandlerFunc(func(params category.PostCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation category.PostCategory has not yet been implemented")
		}),
		OrderPostOrderHandler: order.PostOrderHandlerFunc(func(params order.PostOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation order.PostOrder has not yet been implemented")
		}),
		PricePostPriceHandler: price.PostPriceHandlerFunc(func(params price.PostPriceParams) middleware.Responder {
			return middleware.NotImplemented("operation price.PostPrice has not yet been implemented")
		}),
		ProductPostProductsHandler: product.PostProductsHandlerFunc(func(params product.PostProductsParams) middleware.Responder {
			return middleware.NotImplemented("operation product.PostProducts has not yet been implemented")
		}),
		ProductPostProductsCompareHandler: product.PostProductsCompareHandlerFunc(func(params product.PostProductsCompareParams) middleware.Responder {
			return middleware.NotImplemented("operation product.PostProductsCompare has not yet been implemented")
		}),
		CategoryPutCategoryIDHandler: category.PutCategoryIDHandlerFunc(func(params category.PutCategoryIDParams) middleware.Responder {
			return middleware.NotImplemented("operation category.PutCategoryID has not yet been implemented")
		}),
		PricePutPriceIDHandler: price.PutPriceIDHandlerFunc(func(params price.PutPriceIDParams) middleware.Responder {
			return middleware.NotImplemented("operation price.PutPriceID has not yet been implemented")
		}),
		ProductPutProductsIDHandler: product.PutProductsIDHandlerFunc(func(params product.PutProductsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation product.PutProductsID has not yet been implemented")
		}),
	}
}

/*ProductsServiceAPI Products Service provides API for Products management */
type ProductsServiceAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// CategoryDeleteCategoryIDHandler sets the operation handler for the delete category ID operation
	CategoryDeleteCategoryIDHandler category.DeleteCategoryIDHandler
	// PriceDeletePriceIDHandler sets the operation handler for the delete price ID operation
	PriceDeletePriceIDHandler price.DeletePriceIDHandler
	// ProductDeleteProductsIDHandler sets the operation handler for the delete products ID operation
	ProductDeleteProductsIDHandler product.DeleteProductsIDHandler
	// CategoryGetCategoryIDHandler sets the operation handler for the get category ID operation
	CategoryGetCategoryIDHandler category.GetCategoryIDHandler
	// CategoryGetCategoryListHandler sets the operation handler for the get category list operation
	CategoryGetCategoryListHandler category.GetCategoryListHandler
	// OrderGetOrderIDHandler sets the operation handler for the get order ID operation
	OrderGetOrderIDHandler order.GetOrderIDHandler
	// ProductGetProductsIDHandler sets the operation handler for the get products ID operation
	ProductGetProductsIDHandler product.GetProductsIDHandler
	// ProductGetProductsListHandler sets the operation handler for the get products list operation
	ProductGetProductsListHandler product.GetProductsListHandler
	// CategoryPostCategoryHandler sets the operation handler for the post category operation
	CategoryPostCategoryHandler category.PostCategoryHandler
	// OrderPostOrderHandler sets the operation handler for the post order operation
	OrderPostOrderHandler order.PostOrderHandler
	// PricePostPriceHandler sets the operation handler for the post price operation
	PricePostPriceHandler price.PostPriceHandler
	// ProductPostProductsHandler sets the operation handler for the post products operation
	ProductPostProductsHandler product.PostProductsHandler
	// ProductPostProductsCompareHandler sets the operation handler for the post products compare operation
	ProductPostProductsCompareHandler product.PostProductsCompareHandler
	// CategoryPutCategoryIDHandler sets the operation handler for the put category ID operation
	CategoryPutCategoryIDHandler category.PutCategoryIDHandler
	// PricePutPriceIDHandler sets the operation handler for the put price ID operation
	PricePutPriceIDHandler price.PutPriceIDHandler
	// ProductPutProductsIDHandler sets the operation handler for the put products ID operation
	ProductPutProductsIDHandler product.PutProductsIDHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ProductsServiceAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ProductsServiceAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ProductsServiceAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ProductsServiceAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ProductsServiceAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ProductsServiceAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ProductsServiceAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ProductsServiceAPI
func (o *ProductsServiceAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CategoryDeleteCategoryIDHandler == nil {
		unregistered = append(unregistered, "Category.DeleteCategoryIDHandler")
	}

	if o.PriceDeletePriceIDHandler == nil {
		unregistered = append(unregistered, "Price.DeletePriceIDHandler")
	}

	if o.ProductDeleteProductsIDHandler == nil {
		unregistered = append(unregistered, "Product.DeleteProductsIDHandler")
	}

	if o.CategoryGetCategoryIDHandler == nil {
		unregistered = append(unregistered, "Category.GetCategoryIDHandler")
	}

	if o.CategoryGetCategoryListHandler == nil {
		unregistered = append(unregistered, "Category.GetCategoryListHandler")
	}

	if o.OrderGetOrderIDHandler == nil {
		unregistered = append(unregistered, "Order.GetOrderIDHandler")
	}

	if o.ProductGetProductsIDHandler == nil {
		unregistered = append(unregistered, "Product.GetProductsIDHandler")
	}

	if o.ProductGetProductsListHandler == nil {
		unregistered = append(unregistered, "Product.GetProductsListHandler")
	}

	if o.CategoryPostCategoryHandler == nil {
		unregistered = append(unregistered, "Category.PostCategoryHandler")
	}

	if o.OrderPostOrderHandler == nil {
		unregistered = append(unregistered, "Order.PostOrderHandler")
	}

	if o.PricePostPriceHandler == nil {
		unregistered = append(unregistered, "Price.PostPriceHandler")
	}

	if o.ProductPostProductsHandler == nil {
		unregistered = append(unregistered, "Product.PostProductsHandler")
	}

	if o.ProductPostProductsCompareHandler == nil {
		unregistered = append(unregistered, "Product.PostProductsCompareHandler")
	}

	if o.CategoryPutCategoryIDHandler == nil {
		unregistered = append(unregistered, "Category.PutCategoryIDHandler")
	}

	if o.PricePutPriceIDHandler == nil {
		unregistered = append(unregistered, "Price.PutPriceIDHandler")
	}

	if o.ProductPutProductsIDHandler == nil {
		unregistered = append(unregistered, "Product.PutProductsIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ProductsServiceAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ProductsServiceAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ProductsServiceAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ProductsServiceAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ProductsServiceAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ProductsServiceAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the products service API
func (o *ProductsServiceAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ProductsServiceAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/category/{id}"] = category.NewDeleteCategoryID(o.context, o.CategoryDeleteCategoryIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/price/{id}"] = price.NewDeletePriceID(o.context, o.PriceDeletePriceIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/products/{id}"] = product.NewDeleteProductsID(o.context, o.ProductDeleteProductsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/{id}"] = category.NewGetCategoryID(o.context, o.CategoryGetCategoryIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/list"] = category.NewGetCategoryList(o.context, o.CategoryGetCategoryListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/order/{id}"] = order.NewGetOrderID(o.context, o.OrderGetOrderIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/products/{id}"] = product.NewGetProductsID(o.context, o.ProductGetProductsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/products/list"] = product.NewGetProductsList(o.context, o.ProductGetProductsListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category"] = category.NewPostCategory(o.context, o.CategoryPostCategoryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/order"] = order.NewPostOrder(o.context, o.OrderPostOrderHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/price"] = price.NewPostPrice(o.context, o.PricePostPriceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/products"] = product.NewPostProducts(o.context, o.ProductPostProductsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/products/compare"] = product.NewPostProductsCompare(o.context, o.ProductPostProductsCompareHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/category/{id}"] = category.NewPutCategoryID(o.context, o.CategoryPutCategoryIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/price/{id}"] = price.NewPutPriceID(o.context, o.PricePutPriceIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/products/{id}"] = product.NewPutProductsID(o.context, o.ProductPutProductsIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ProductsServiceAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ProductsServiceAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ProductsServiceAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ProductsServiceAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
