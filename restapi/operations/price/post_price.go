// Code generated by go-swagger; DO NOT EDIT.

package price

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// PostPriceHandlerFunc turns a function with the right signature into a post price handler
type PostPriceHandlerFunc func(PostPriceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPriceHandlerFunc) Handle(params PostPriceParams) middleware.Responder {
	return fn(params)
}

// PostPriceHandler interface for that can handle valid post price params
type PostPriceHandler interface {
	Handle(PostPriceParams) middleware.Responder
}

// NewPostPrice creates a new http.Handler for the post price operation
func NewPostPrice(ctx *middleware.Context, handler PostPriceHandler) *PostPrice {
	return &PostPrice{Context: ctx, Handler: handler}
}

/*PostPrice swagger:route POST /price price postPrice

Create New Price

Add New Price

*/
type PostPrice struct {
	Context *middleware.Context
	Handler PostPriceHandler
}

func (o *PostPrice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostPriceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostPriceBody post price body
// swagger:model PostPriceBody
type PostPriceBody struct {

	// min quantity
	MinQuantity int64 `json:"min_quantity,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// product id
	ProductID int64 `json:"product_id,omitempty"`
}

// Validate validates this post price body
func (o *PostPriceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostPriceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPriceBody) UnmarshalBinary(b []byte) error {
	var res PostPriceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostPriceOKBody post price o k body
// swagger:model PostPriceOKBody
type PostPriceOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post price o k body
func (o *PostPriceOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostPriceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPriceOKBody) UnmarshalBinary(b []byte) error {
	var res PostPriceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
