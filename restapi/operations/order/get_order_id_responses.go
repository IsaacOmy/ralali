// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/isaacomy/ralali/models"
)

// GetOrderIDOKCode is the HTTP code returned for type GetOrderIDOK
const GetOrderIDOKCode int = 200

/*GetOrderIDOK Sends Order data

swagger:response getOrderIdOK
*/
type GetOrderIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Order `json:"body,omitempty"`
}

// NewGetOrderIDOK creates GetOrderIDOK with default headers values
func NewGetOrderIDOK() *GetOrderIDOK {

	return &GetOrderIDOK{}
}

// WithPayload adds the payload to the get order Id o k response
func (o *GetOrderIDOK) WithPayload(payload *models.Order) *GetOrderIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order Id o k response
func (o *GetOrderIDOK) SetPayload(payload *models.Order) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOrderIDBadRequestCode is the HTTP code returned for type GetOrderIDBadRequest
const GetOrderIDBadRequestCode int = 400

/*GetOrderIDBadRequest Bad Request / Validation exception

swagger:response getOrderIdBadRequest
*/
type GetOrderIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetOrderIDBadRequest creates GetOrderIDBadRequest with default headers values
func NewGetOrderIDBadRequest() *GetOrderIDBadRequest {

	return &GetOrderIDBadRequest{}
}

// WithPayload adds the payload to the get order Id bad request response
func (o *GetOrderIDBadRequest) WithPayload(payload *models.ErrorMessage) *GetOrderIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order Id bad request response
func (o *GetOrderIDBadRequest) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOrderIDNotFoundCode is the HTTP code returned for type GetOrderIDNotFound
const GetOrderIDNotFoundCode int = 404

/*GetOrderIDNotFound Not found

swagger:response getOrderIdNotFound
*/
type GetOrderIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetOrderIDNotFound creates GetOrderIDNotFound with default headers values
func NewGetOrderIDNotFound() *GetOrderIDNotFound {

	return &GetOrderIDNotFound{}
}

// WithPayload adds the payload to the get order Id not found response
func (o *GetOrderIDNotFound) WithPayload(payload *models.ErrorMessage) *GetOrderIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order Id not found response
func (o *GetOrderIDNotFound) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOrderIDUnprocessableEntityCode is the HTTP code returned for type GetOrderIDUnprocessableEntity
const GetOrderIDUnprocessableEntityCode int = 422

/*GetOrderIDUnprocessableEntity Unprocessable Entity

swagger:response getOrderIdUnprocessableEntity
*/
type GetOrderIDUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetOrderIDUnprocessableEntity creates GetOrderIDUnprocessableEntity with default headers values
func NewGetOrderIDUnprocessableEntity() *GetOrderIDUnprocessableEntity {

	return &GetOrderIDUnprocessableEntity{}
}

// WithPayload adds the payload to the get order Id unprocessable entity response
func (o *GetOrderIDUnprocessableEntity) WithPayload(payload *models.ErrorMessage) *GetOrderIDUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order Id unprocessable entity response
func (o *GetOrderIDUnprocessableEntity) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderIDUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetOrderIDDefault Error

swagger:response getOrderIdDefault
*/
type GetOrderIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetOrderIDDefault creates GetOrderIDDefault with default headers values
func NewGetOrderIDDefault(code int) *GetOrderIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetOrderIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get order ID default response
func (o *GetOrderIDDefault) WithStatusCode(code int) *GetOrderIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get order ID default response
func (o *GetOrderIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get order ID default response
func (o *GetOrderIDDefault) WithPayload(payload *models.ErrorMessage) *GetOrderIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order ID default response
func (o *GetOrderIDDefault) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
