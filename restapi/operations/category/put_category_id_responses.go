// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/isaacomy/ralali/models"
)

// PutCategoryIDOKCode is the HTTP code returned for type PutCategoryIDOK
const PutCategoryIDOKCode int = 200

/*PutCategoryIDOK Updates Category data

swagger:response putCategoryIdOK
*/
type PutCategoryIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Category `json:"body,omitempty"`
}

// NewPutCategoryIDOK creates PutCategoryIDOK with default headers values
func NewPutCategoryIDOK() *PutCategoryIDOK {

	return &PutCategoryIDOK{}
}

// WithPayload adds the payload to the put category Id o k response
func (o *PutCategoryIDOK) WithPayload(payload *models.Category) *PutCategoryIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put category Id o k response
func (o *PutCategoryIDOK) SetPayload(payload *models.Category) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCategoryIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCategoryIDBadRequestCode is the HTTP code returned for type PutCategoryIDBadRequest
const PutCategoryIDBadRequestCode int = 400

/*PutCategoryIDBadRequest Bad Request / Validation exception

swagger:response putCategoryIdBadRequest
*/
type PutCategoryIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutCategoryIDBadRequest creates PutCategoryIDBadRequest with default headers values
func NewPutCategoryIDBadRequest() *PutCategoryIDBadRequest {

	return &PutCategoryIDBadRequest{}
}

// WithPayload adds the payload to the put category Id bad request response
func (o *PutCategoryIDBadRequest) WithPayload(payload *models.ErrorMessage) *PutCategoryIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put category Id bad request response
func (o *PutCategoryIDBadRequest) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCategoryIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCategoryIDNotFoundCode is the HTTP code returned for type PutCategoryIDNotFound
const PutCategoryIDNotFoundCode int = 404

/*PutCategoryIDNotFound Not found

swagger:response putCategoryIdNotFound
*/
type PutCategoryIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutCategoryIDNotFound creates PutCategoryIDNotFound with default headers values
func NewPutCategoryIDNotFound() *PutCategoryIDNotFound {

	return &PutCategoryIDNotFound{}
}

// WithPayload adds the payload to the put category Id not found response
func (o *PutCategoryIDNotFound) WithPayload(payload *models.ErrorMessage) *PutCategoryIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put category Id not found response
func (o *PutCategoryIDNotFound) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCategoryIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCategoryIDUnprocessableEntityCode is the HTTP code returned for type PutCategoryIDUnprocessableEntity
const PutCategoryIDUnprocessableEntityCode int = 422

/*PutCategoryIDUnprocessableEntity Unprocessable Entity

swagger:response putCategoryIdUnprocessableEntity
*/
type PutCategoryIDUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutCategoryIDUnprocessableEntity creates PutCategoryIDUnprocessableEntity with default headers values
func NewPutCategoryIDUnprocessableEntity() *PutCategoryIDUnprocessableEntity {

	return &PutCategoryIDUnprocessableEntity{}
}

// WithPayload adds the payload to the put category Id unprocessable entity response
func (o *PutCategoryIDUnprocessableEntity) WithPayload(payload *models.ErrorMessage) *PutCategoryIDUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put category Id unprocessable entity response
func (o *PutCategoryIDUnprocessableEntity) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCategoryIDUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutCategoryIDDefault Error

swagger:response putCategoryIdDefault
*/
type PutCategoryIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutCategoryIDDefault creates PutCategoryIDDefault with default headers values
func NewPutCategoryIDDefault(code int) *PutCategoryIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PutCategoryIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put category ID default response
func (o *PutCategoryIDDefault) WithStatusCode(code int) *PutCategoryIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put category ID default response
func (o *PutCategoryIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put category ID default response
func (o *PutCategoryIDDefault) WithPayload(payload *models.ErrorMessage) *PutCategoryIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put category ID default response
func (o *PutCategoryIDDefault) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCategoryIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
