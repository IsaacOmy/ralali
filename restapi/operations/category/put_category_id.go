// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// PutCategoryIDHandlerFunc turns a function with the right signature into a put category ID handler
type PutCategoryIDHandlerFunc func(PutCategoryIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCategoryIDHandlerFunc) Handle(params PutCategoryIDParams) middleware.Responder {
	return fn(params)
}

// PutCategoryIDHandler interface for that can handle valid put category ID params
type PutCategoryIDHandler interface {
	Handle(PutCategoryIDParams) middleware.Responder
}

// NewPutCategoryID creates a new http.Handler for the put category ID operation
func NewPutCategoryID(ctx *middleware.Context, handler PutCategoryIDHandler) *PutCategoryID {
	return &PutCategoryID{Context: ctx, Handler: handler}
}

/*PutCategoryID swagger:route PUT /category/{id} category putCategoryId

Update Category by ID

Update Category by ID

*/
type PutCategoryID struct {
	Context *middleware.Context
	Handler PutCategoryIDHandler
}

func (o *PutCategoryID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutCategoryIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutCategoryIDBody put category ID body
// swagger:model PutCategoryIDBody
type PutCategoryIDBody struct {

	// category parent id
	CategoryParentID int64 `json:"category_parent_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this put category ID body
func (o *PutCategoryIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCategoryIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCategoryIDBody) UnmarshalBinary(b []byte) error {
	var res PutCategoryIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
