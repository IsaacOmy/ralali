// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCategoryIDHandlerFunc turns a function with the right signature into a get category ID handler
type GetCategoryIDHandlerFunc func(GetCategoryIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCategoryIDHandlerFunc) Handle(params GetCategoryIDParams) middleware.Responder {
	return fn(params)
}

// GetCategoryIDHandler interface for that can handle valid get category ID params
type GetCategoryIDHandler interface {
	Handle(GetCategoryIDParams) middleware.Responder
}

// NewGetCategoryID creates a new http.Handler for the get category ID operation
func NewGetCategoryID(ctx *middleware.Context, handler GetCategoryIDHandler) *GetCategoryID {
	return &GetCategoryID{Context: ctx, Handler: handler}
}

/*GetCategoryID swagger:route GET /category/{id} category getCategoryId

Get Category Detail

Get Category Detail

*/
type GetCategoryID struct {
	Context *middleware.Context
	Handler GetCategoryIDHandler
}

func (o *GetCategoryID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCategoryIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
