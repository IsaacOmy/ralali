// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/isaacomy/ralali/models"
)

// PutProductsIDOKCode is the HTTP code returned for type PutProductsIDOK
const PutProductsIDOKCode int = 200

/*PutProductsIDOK Updates Product data

swagger:response putProductsIdOK
*/
type PutProductsIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Product `json:"body,omitempty"`
}

// NewPutProductsIDOK creates PutProductsIDOK with default headers values
func NewPutProductsIDOK() *PutProductsIDOK {

	return &PutProductsIDOK{}
}

// WithPayload adds the payload to the put products Id o k response
func (o *PutProductsIDOK) WithPayload(payload *models.Product) *PutProductsIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put products Id o k response
func (o *PutProductsIDOK) SetPayload(payload *models.Product) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductsIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutProductsIDBadRequestCode is the HTTP code returned for type PutProductsIDBadRequest
const PutProductsIDBadRequestCode int = 400

/*PutProductsIDBadRequest Bad Request / Validation exception

swagger:response putProductsIdBadRequest
*/
type PutProductsIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutProductsIDBadRequest creates PutProductsIDBadRequest with default headers values
func NewPutProductsIDBadRequest() *PutProductsIDBadRequest {

	return &PutProductsIDBadRequest{}
}

// WithPayload adds the payload to the put products Id bad request response
func (o *PutProductsIDBadRequest) WithPayload(payload *models.ErrorMessage) *PutProductsIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put products Id bad request response
func (o *PutProductsIDBadRequest) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductsIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutProductsIDNotFoundCode is the HTTP code returned for type PutProductsIDNotFound
const PutProductsIDNotFoundCode int = 404

/*PutProductsIDNotFound Not found

swagger:response putProductsIdNotFound
*/
type PutProductsIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutProductsIDNotFound creates PutProductsIDNotFound with default headers values
func NewPutProductsIDNotFound() *PutProductsIDNotFound {

	return &PutProductsIDNotFound{}
}

// WithPayload adds the payload to the put products Id not found response
func (o *PutProductsIDNotFound) WithPayload(payload *models.ErrorMessage) *PutProductsIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put products Id not found response
func (o *PutProductsIDNotFound) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductsIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutProductsIDUnprocessableEntityCode is the HTTP code returned for type PutProductsIDUnprocessableEntity
const PutProductsIDUnprocessableEntityCode int = 422

/*PutProductsIDUnprocessableEntity Unprocessable Entity

swagger:response putProductsIdUnprocessableEntity
*/
type PutProductsIDUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutProductsIDUnprocessableEntity creates PutProductsIDUnprocessableEntity with default headers values
func NewPutProductsIDUnprocessableEntity() *PutProductsIDUnprocessableEntity {

	return &PutProductsIDUnprocessableEntity{}
}

// WithPayload adds the payload to the put products Id unprocessable entity response
func (o *PutProductsIDUnprocessableEntity) WithPayload(payload *models.ErrorMessage) *PutProductsIDUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put products Id unprocessable entity response
func (o *PutProductsIDUnprocessableEntity) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductsIDUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutProductsIDDefault Error

swagger:response putProductsIdDefault
*/
type PutProductsIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPutProductsIDDefault creates PutProductsIDDefault with default headers values
func NewPutProductsIDDefault(code int) *PutProductsIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PutProductsIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put products ID default response
func (o *PutProductsIDDefault) WithStatusCode(code int) *PutProductsIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put products ID default response
func (o *PutProductsIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put products ID default response
func (o *PutProductsIDDefault) WithPayload(payload *models.ErrorMessage) *PutProductsIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put products ID default response
func (o *PutProductsIDDefault) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductsIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
