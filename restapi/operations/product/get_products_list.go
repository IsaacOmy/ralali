// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	"github.com/isaacomy/ralali/models"
)

// GetProductsListHandlerFunc turns a function with the right signature into a get products list handler
type GetProductsListHandlerFunc func(GetProductsListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProductsListHandlerFunc) Handle(params GetProductsListParams) middleware.Responder {
	return fn(params)
}

// GetProductsListHandler interface for that can handle valid get products list params
type GetProductsListHandler interface {
	Handle(GetProductsListParams) middleware.Responder
}

// NewGetProductsList creates a new http.Handler for the get products list operation
func NewGetProductsList(ctx *middleware.Context, handler GetProductsListHandler) *GetProductsList {
	return &GetProductsList{Context: ctx, Handler: handler}
}

/*GetProductsList swagger:route GET /products/list product getProductsList

Get Product List

Get Product List

*/
type GetProductsList struct {
	Context *middleware.Context
	Handler GetProductsListHandler
}

func (o *GetProductsList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProductsListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetProductsListOKBody get products list o k body
// swagger:model GetProductsListOKBody
type GetProductsListOKBody struct {

	// items
	Items []*models.Product `json:"items"`

	// total items
	TotalItems float64 `json:"total_items,omitempty"`
}

// Validate validates this get products list o k body
func (o *GetProductsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsListOKBody) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProductsListOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsListOKBody) UnmarshalBinary(b []byte) error {
	var res GetProductsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
